# Avanti Booking System - Development Environment
# Complete local development setup with all services

version: '3.8'

services:
  # Main application
  avanti-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
      - NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - firebase-emulator
      - redis
      - postgres
    networks:
      - avanti-network
    restart: unless-stopped

  # Firebase Emulator Suite
  firebase-emulator:
    image: firebase/firebase-tools:latest
    ports:
      - "4000:4000"   # Emulator UI
      - "9099:9099"   # Auth
      - "8080:8080"   # Firestore
      - "5001:5001"   # Functions
      - "9000:9000"   # Hosting
      - "8085:8085"   # Pub/Sub
    volumes:
      - .:/app
      - firebase-data:/opt/firebase
    working_dir: /app
    command: >
      sh -c "
        firebase emulators:start 
        --only auth,firestore,functions,hosting,pubsub 
        --host 0.0.0.0
      "
    environment:
      - FIREBASE_TOKEN=${FIREBASE_TOKEN}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-admin-key.json
    networks:
      - avanti-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-avanti123}
    networks:
      - avanti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for analytics and reporting
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=avanti
      - POSTGRES_USER=avanti
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-avanti123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - avanti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U avanti"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - avanti-app
    networks:
      - avanti-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - avanti-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - avanti-network
    restart: unless-stopped

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - avanti-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - avanti-network
    restart: unless-stopped

  # Stripe CLI for webhook testing
  stripe-cli:
    image: stripe/stripe-cli:latest
    command: >
      sh -c "
        stripe login --api-key ${STRIPE_SECRET_KEY} &&
        stripe listen --forward-to avanti-app:3000/api/stripe/webhook
      "
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - avanti-app
    networks:
      - avanti-network
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - avanti-network
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9001:9000"
      - "9002:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-avanti}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-avanti123456}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - avanti-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - avanti-network
    restart: unless-stopped

# Networks
networks:
  avanti-network:
    driver: bridge

# Volumes
volumes:
  firebase-data:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  minio-data:
