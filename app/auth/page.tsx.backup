'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../contexts/AuthContext';
import '../styles/auth.css';

type AuthTab = 'email' | 'phone';

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState<AuthTab>('email');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);
  const [isAppleLoading, setIsAppleLoading] = useState(false);
  const [showVerification, setShowVerification] = useState(false);
  const [error, setError] = useState('');
  
  const router = useRouter();
  const { user, userRole } = useAuth();

  // Redirect if already logged in
  if (user && userRole) {
    if (userRole === 'admin') {
      router.push('/admin');
    } else if (userRole === 'driver') {
      router.push('/driver');
    } else {
      router.push('/');
    }
    return null;
  }

  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      router.push('/');
    } catch (error) {
      setError('Felaktig e-post eller lösenord');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePhoneAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      setShowVerification(true);
    } catch (error) {
      setError('Fel vid skickande av SMS-kod');
    } finally {
      setIsLoading(false);
    }
  };

  const handleVerification = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      router.push('/');
    } catch (error) {
      setError('Felaktig kod');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleAuth = async () => {
    setIsGoogleLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      router.push('/');
    } catch (error) {
      setError('Fel vid Google-inloggning');
    } finally {
      setIsGoogleLoading(false);
    }
  };

  const handleAppleAuth = async () => {
    setIsAppleLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      router.push('/');
    } catch (error) {
      setError('Fel vid Apple-inloggning');
    } finally {
      setIsAppleLoading(false);
    }
  };

  const resetPhoneAuth = () => {
    setShowVerification(false);
    setVerificationCode('');
    setError('');
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center px-4 overflow-hidden" style={{ overscrollBehavior: 'none' }}>
      <div className="absolute inset-0 -z-10 bg-black"></div>
      <div className="absolute inset-0 -z-10 pointer-events-none bg-[radial-gradient(circle_at_30%_20%,#0b0b0b,transparent_40%),radial-gradient(circle_at_70%_30%,#101010,transparent_40%),linear-gradient(#000,#0a0a0a)]"></div>
      <div className="absolute inset-0 -z-10 opacity-[0.06] bg-[url('/noise.svg')] bg-repeat" aria-hidden="true"></div>
      <div className="absolute top-4 left-4 z-20">
        <img alt="Avanti" width="140" height="40" decoding="async" data-nimg="1" src="/avanti-logo.svg" style={{ color: 'transparent' }} />
      </div>
      <div className="w-full h-full flex items-center justify-center">
        <div className="w-full max-w-[400px]" style={{ transform: 'none', transformOrigin: 'center center', opacity: 1 }}>
        <div className="rounded-3xl p-4 md:p-6 shadow-2xl bg-white/5 backdrop-blur-xl ring-1 ring-white/10 space-y-3">
          <div className="text-center">
            <h1 className="text-white/90 text-lg md:text-2xl font-semibold">Välkommen – Logga in för att boka din förare</h1>
          </div>
          
          <div className="grid grid-cols-1 gap-2">
            <button 
              data-testid="btn-google" 
              onClick={handleGoogleAuth}
              disabled={isGoogleLoading || isAppleLoading || isLoading}
              className="w-full inline-flex items-center justify-center gap-3 rounded-2xl px-4 py-3 text-sm font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary bg-white text-[#3c4043] shadow-md hover:shadow-lg ring-0 data-[busy=true]:opacity-80 border border-[#dadce0] py-2"
            >
              <span className="inline-flex w-5 h-5 items-center justify-center shrink-0">
                <img alt="Google" className="w-5 h-5 object-contain object-left" draggable="false" src="/logos/google-g.svg" />
              </span>
              <span>{isGoogleLoading ? 'Loggar in...' : 'Fortsätt med Google'}</span>
            </button>
            
            <button 
              data-testid="btn-apple" 
              onClick={handleAppleAuth}
              disabled={isGoogleLoading || isAppleLoading || isLoading}
              className="w-full inline-flex items-center justify-center gap-3 rounded-2xl px-4 py-3 text-sm font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary bg-black text-white hover:bg-[#111] border border-white/10 py-2"
            >
              <span className="inline-flex w-5 h-5 items-center justify-center shrink-0 -ml-0.5">
                <img alt="Apple" className="w-5 h-5 object-contain object-left" draggable="false" src="/logos/apple.png" />
              </span>
              <span>{isAppleLoading ? 'Loggar in...' : 'Fortsätt med Apple'}</span>
            </button>
          </div>
          
          <div className="flex items-center gap-2 my-1">
            <div className="h-px bg-white/10 flex-1"></div>
            <span className="text-zinc-400 text-xs">eller</span>
            <div className="h-px bg-white/10 flex-1"></div>
          </div>
          
          <div className="flex items-center justify-center mb-1">
            <div className="inline-flex rounded-xl bg-white/5 ring-1 ring-white/10 p-0.5 text-xs backdrop-blur-sm">
              <button 
                className={`px-4 py-1.5 rounded-lg font-medium transition-all duration-200 ${
                  activeTab === 'email' 
                    ? 'bg-gradient-to-r from-white/15 to-white/10 text-white shadow-sm ring-1 ring-white/20' 
                    : 'text-zinc-400 hover:text-white hover:bg-white/5'
                }`}
                onClick={() => {
                  setActiveTab('email');
                  resetPhoneAuth();
                }}
              >
                E‑post
              </button>
              <button 
                className={`px-4 py-1.5 rounded-lg font-medium transition-all duration-200 ${
                  activeTab === 'phone' 
                    ? 'bg-gradient-to-r from-white/15 to-white/10 text-white shadow-sm ring-1 ring-white/20' 
                    : 'text-zinc-400 hover:text-white hover:bg-white/5'
                }`}
                onClick={() => {
                  setActiveTab('phone');
                  setError('');
                }}
              >
                Telefon
              </button>
            </div>
          </div>
          
          <div className="space-y-2">
            {activeTab === 'email' && (
              <form onSubmit={handleEmailAuth}>
                <label className="text-xs text-zinc-400" htmlFor="email">E‑post</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M20 4H4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path>
                    </svg>
                  </span>
                  <input 
                    id="email" 
                    data-testid="input-email" 
                    className="pl-10 rounded-2xl bg-white/5 ring-1 ring-white/10 w-full px-3 py-2 text-sm text-white outline-none placeholder:text-zinc-500 focus:ring-2 focus:ring-primary" 
                    placeholder="din@mail.se" 
                    type="email" 
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                    disabled={isLoading}
                  />
                </div>
                
                <label className="text-xs text-zinc-400" htmlFor="password">Lösenord</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M6 10V8a6 6 0 1112 0v2h1a1 1 0 011 1v10a1 1 0 01-1 1H5a1 1 0 01-1-1V11a1 1 0 011-1h1zm2 0h8V8a4 4 0 10-8 0v2z"></path>
                    </svg>
                  </span>
                  <input 
                    id="password" 
                    data-testid="input-password" 
                    className="pl-10 pr-10 rounded-2xl bg-white/5 ring-1 ring-white/10 w-full px-3 py-2 text-sm text-white outline-none placeholder:text-zinc-500 focus:ring-2 focus:ring-primary" 
                    placeholder="••••••••" 
                    type={showPassword ? 'text' : 'password'} 
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    disabled={isLoading}
                  />
                  <button 
                    type="button" 
                    aria-label="Visa lösenord" 
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-zinc-400 hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-primary rounded-md"
                    disabled={isLoading}
                  >
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M2.3 1.7L1 3l3.1 3.1C2 7.4.7 9 .7 9s4 7 11.3 7c1.7 0 3.2-.4 4.6-1.1L21 21l1.3-1.3L2.3 1.7z"></path>
                    </svg>
                  </button>
                </div>
                
                <button 
                  data-testid="btn-email" 
                  type="submit"
                  disabled={isLoading || !email || !password}
                  className="w-full inline-flex items-center justify-center gap-3 rounded-2xl px-4 py-3 text-sm font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary bg-white/8 text-white/95 ring-1 ring-white/15 border border-white/10 shadow-glass hover:bg-white/12 py-2 mt-1"
                >
                  <span>{isLoading ? 'Loggar in...' : 'Logga in'}</span>
                </button>
              </form>
            )}
            
            {activeTab === 'phone' && !showVerification && (
              <form onSubmit={handlePhoneAuth}>
                <label className="text-xs text-zinc-400" htmlFor="phone">Telefonnummer</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                    </svg>
                  </span>
                  <input 
                    id="phone" 
                    data-testid="input-phone" 
                    className="pl-10 rounded-2xl bg-white/5 ring-1 ring-white/10 w-full px-3 py-2 text-sm text-white outline-none placeholder:text-zinc-500 focus:ring-2 focus:ring-primary" 
                    placeholder="070-123 45 67" 
                    type="tel" 
                    value={phoneNumber}
                    onChange={(e) => setPhoneNumber(e.target.value)}
                    required
                    disabled={isLoading}
                  />
                </div>
                
                <button 
                  data-testid="btn-phone" 
                  type="submit"
                  disabled={isLoading || !phoneNumber}
                  className="w-full inline-flex items-center justify-center gap-3 rounded-2xl px-4 py-3 text-sm font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary bg-white/8 text-white/95 ring-1 ring-white/15 border border-white/10 shadow-glass hover:bg-white/12 py-2 mt-1"
                >
                  <span>{isLoading ? 'Skickar kod...' : 'Skicka SMS-kod'}</span>
                </button>
              </form>
            )}
            
            {activeTab === 'phone' && showVerification && (
              <form onSubmit={handleVerification}>
                <label className="text-xs text-zinc-400" htmlFor="verification">Verifieringskod</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                  </span>
                  <input 
                    id="verification" 
                    data-testid="input-verification" 
                    className="pl-10 rounded-2xl bg-white/5 ring-1 ring-white/10 w-full px-3 py-2 text-sm text-white outline-none placeholder:text-zinc-500 focus:ring-2 focus:ring-primary" 
                    placeholder="123456" 
                    type="text" 
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    maxLength={6}
                    required
                    disabled={isLoading}
                  />
                </div>
                
                <button 
                  data-testid="btn-verification" 
                  type="submit"
                  disabled={isLoading || !verificationCode}
                  className="w-full inline-flex items-center justify-center gap-3 rounded-2xl px-4 py-3 text-sm font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary bg-white/8 text-white/95 ring-1 ring-white/15 border border-white/10 shadow-glass hover:bg-white/12 py-2 mt-1"
                >
                  <span>{isLoading ? 'Verifierar...' : 'Verifiera kod'}</span>
                </button>
                
                <button 
                  type="button"
                  onClick={resetPhoneAuth}
                  className="w-full text-center text-zinc-400 hover:text-white text-sm mt-2"
                >
                  ← Tillbaka
                </button>
              </form>
            )}
          </div>
          
          <div className="flex items-center justify-between pt-1">
            <div className="flex items-center gap-2 text-zinc-400 text-[11px]">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                <path d="M6 10V8a6 6 0 1112 0v2h1a1 1 0 011 1v10a1 1 0 01-1 1H5a1 1 0 01-1-1V11a1 1 0 011-1h1zm2 0h8V8a4 4 0 10-8 0v2z"></path>
              </svg>
              <span>Säker inloggning via Firebase</span>
            </div>
            <div className="flex items-center gap-3 text-zinc-400 text-[11px]">
              <a className="hover:text-white" href="/villkor?from=login">Villkor</a>
              <a className="hover:text-white" href="/integritet?from=login">Integritetspolicy</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
